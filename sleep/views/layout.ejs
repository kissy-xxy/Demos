<!DOCTYPE html>
<html>
    <head>
        <title>IHAVEU</title>
        <!-- Viewport mobile tag for sensible mobile support -->
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        
        <!--
        Stylesheets and Preprocessors
        ==============================
        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).
        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
        
        + Change the order of your CSS files
        + Import stylesheets from other directories
        + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->
        <!--STYLES-->
        <link rel="stylesheet" href="/styles/app.css">
        <link rel="stylesheet" href="/styles/bootstrap.css">
        <link rel="stylesheet" href="/styles/importer.css">
        <!--STYLES END-->
    </head>
    <body>
        <!-- 引入文件 -->
        <%- partial ('common/date.ejs') %>

        <input id="path" type="input" style="display:none;" value="<%='/'+view.path%>"/>
        <div class="navbar navbar-default">
            <div class="container">
                <div class="navbar-header">
                    <a class="navbar-brand" href="/">IHAVEU</a>
                </div>
                <div class="collapse navbar-collapse">
                    <ul id="main_nav" class="nav navbar-nav">
                        <li><a href="/index/home">首页</a></li>
                        <li><a href="/user/index">用户</a></li>
                        <li class="dropdown active">
                            
                            <ul id="main_msg_nav" class="dropdown-menu">
                                <li><a href="/messages/index">通知</a></li>
                                <li role="separator" class="divider"></li>
                                <li><a href="/categories/index">分类</a></li>
                                <li><a href="/apps/index">应用</a></li>
                                <li><a href="/devices/index">设备</a></li>
                                <li><a href="/versions/index">版本</a></li>
                                <li><a href="/logs/index">日志</a></li>
                            </ul>
                            <a href="/messages/index" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">通知<span class="caret"></span></a>
                        </li>
                        
                    </ul>
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="<%= session.User?'/user/show/'+session.User.id:"#"%>"><%= session.User?session.User.name:""%></a></li>
                        <li><a href="/session/destroy"><%= session.User?"注销":""%></a></li>
                    </ul>
                </div>
                
            </div>
        </div>
        <div class="container">
            <%- body %>
        </div>
        <!--
        Client-side Templates
        ========================
        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.
        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
        stringfile before they're served.
        -->
        <!--TEMPLATES-->
        
        <!--TEMPLATES END-->
        <!--
        Client-side Javascript
        ========================
        You can always bring in JS files manually with `script` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
        By default, files in your `assets/js` folder are included here
        automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
        CoffeeScript (.coffee) are supported. In production, your scripts will be minified
        and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
        
        + Change the order of your scripts
        + Import scripts from other directories
        + Use a different preprocessor, like TypeScript
        -->
        <!--SCRIPTS-->
        <script src="/js/dependencies/sails.io.js"></script>
        <script src="/js/dependencies/jquery-1.10.2.min.js"></script>
        <script src="/js/dependencies/bootstrap.js"></script>
        <script src="/js/dependencies/socket.io.js"></script>
        <script src="/js/app.js"></script>
        <script src="/js/layout.js"></script>
        <script src="/js/todo.js"></script>
        <!--SCRIPTS END-->
    </body>
</html>